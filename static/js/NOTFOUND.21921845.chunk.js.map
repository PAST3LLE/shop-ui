{"version":3,"sources":["hooks/useDetectScrollIntoView.ts","components/SmartImg/index.tsx","hooks/useEffectRef.ts","pages/Error/NotFound/index.tsx"],"names":["useDetectScrollIntoView","elem","options","defaultView","useState","isInView","setIsInView","useEffect","observer","IntersectionObserver","entry","isVisible","isIntersecting","unobserve","observe","disconnect","StyledPicture","styled","picture","DEFAULT_LQ_IP","quality","blur","DEFAULT_TRANSFORMATIONS","pr","BASE_INTERSECTION_OPTIONS","threshold","delay","ApiImage","ikPath","defaultPath","pathSrcSet","transformation","loadInView","lazy","lq","forwardedRef","rest","defaultRefValue","refToObserve","setRefToObserve","refToSet","useRef","useEffectRef","ref","conditionalCheck","current","undefined","root","container","document","useMemo","active","LQIP","derivedTransformations","publicKey","process","urlEndpoint","transformationPosition","src","loading","lqip","Object","entries","map","size","url","media","srcSet","SmartImg","forwardRef","props","displayName","Container","div","ButtonPrimary","theme","primaryText1","bg5","mediaWidth","upToSmall","NotFound","itemColor","q","as","Link","to"],"mappings":"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","file":"static/js/NOTFOUND.21921845.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nexport type LoadInView = {\n  container: Document | Element\n  conditionalCheck?: boolean\n}\nexport default function useDetectScrollIntoView(\n  elem: HTMLElement | null | undefined,\n  options: IntersectionObserverInit | undefined,\n  defaultView: boolean\n) {\n  const [isInView, setIsInView] = useState(defaultView)\n\n  useEffect(() => {\n    if (!elem || isInView) return\n\n    const observerCb: IntersectionObserverCallback = ([entry]: IntersectionObserverEntry[], observer) => {\n      if ((entry as any)?.isVisible || entry.isIntersecting) {\n        setIsInView(true)\n        observer.unobserve(elem)\n      }\n    }\n    const observer = new IntersectionObserver(observerCb, options)\n\n    // start observation of elem\n    observer.observe(elem)\n\n    // disconnect observer and close\n    return () => {\n      observer.disconnect()\n    }\n  }, [elem, options, isInView])\n\n  return isInView\n}\n","import { forwardRef, useMemo } from 'react'\nimport { IKImage, IKContext } from 'imagekitio-react'\nimport useDetectScrollIntoView, { LoadInView } from 'hooks/useDetectScrollIntoView'\nimport useEffectRef from 'hooks/useEffectRef'\nimport styled from 'styled-components/macro'\n\nexport type ImageKitTransformation = { [x: string]: undefined | number | string | boolean }[]\n\ninterface BaseImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  pathSrcSet?: { [sizekey: string | number]: string }\n  lq?: boolean\n  lazy?: boolean\n  forwardedRef?: React.ForwardedRef<any>\n  transformation?: ImageKitTransformation\n  loadInView?: LoadInView\n}\n\ntype ImagePropsWithDefaultImage = BaseImageProps & {\n  ikPath?: undefined\n  defaultPath: string\n}\n\ntype ImagePropsWithIkImage = BaseImageProps & {\n  ikPath: string\n  defaultPath?: undefined\n}\n\nexport type SmartImageProps = ImagePropsWithDefaultImage | ImagePropsWithIkImage\n\nconst StyledPicture = styled.picture`\n  height: 100%;\n`\n\nconst DEFAULT_LQ_IP = {\n  quality: 20,\n  blur: 6\n}\nconst DEFAULT_TRANSFORMATIONS = [{ pr: true }]\nconst BASE_INTERSECTION_OPTIONS = {\n  threshold: 0.1,\n  delay: 1000\n}\n\nexport function ApiImage({\n  defaultPath,\n  pathSrcSet,\n  transformation,\n  loadInView,\n  lazy,\n  lq,\n  forwardedRef\n}: ImagePropsWithDefaultImage): JSX.Element | null\nexport function ApiImage({\n  ikPath,\n  pathSrcSet,\n  transformation,\n  loadInView,\n  lazy,\n  lq,\n  forwardedRef\n}: ImagePropsWithIkImage): JSX.Element | null\nexport function ApiImage({\n  ikPath,\n  defaultPath,\n  pathSrcSet,\n  transformation = DEFAULT_TRANSFORMATIONS,\n  loadInView,\n  lazy = true,\n  lq = true,\n  forwardedRef,\n  ...rest\n}: SmartImageProps): JSX.Element | null {\n  // load if in view only!\n  const [refToSet, ref] = useEffectRef<HTMLSpanElement>(null)\n  const isInView = useDetectScrollIntoView(\n    !!loadInView?.conditionalCheck ? ref?.current : undefined,\n    {\n      ...BASE_INTERSECTION_OPTIONS,\n      root: loadInView?.container || document\n    },\n    // default view state\n    loadInView === undefined\n  )\n\n  const [LQIP, derivedTransformations] = useMemo(() => [{ ...DEFAULT_LQ_IP, active: lq }, transformation], [\n    lq,\n    transformation\n  ])\n\n  return ikPath ? (\n    <IKContext\n      publicKey={process.env.REACT_APP_IMAGEKIT_PUBLIC_KEY}\n      urlEndpoint={process.env.REACT_APP_IMAGEKIT_URL_ENDPOINT}\n      transformationPosition=\"path\"\n      // authenticationEndpoint=\"http://www.yourserver.com/auth\"\n    >\n      {/* Observable span to detect if in view */}\n      <span ref={refToSet} />\n      <IKImage\n        // path={new URL(ikPath).pathname}\n        src={!isInView ? undefined : ikPath}\n        loading={lazy ? 'lazy' : 'eager'}\n        lqip={LQIP}\n        transformation={derivedTransformations}\n        ref={forwardedRef}\n      />\n    </IKContext>\n  ) : defaultPath ? (\n    <>\n      {/* Observable span to detect if in view */}\n      <span ref={refToSet} />\n      {\n        <StyledPicture>\n          {/* e.g [500, \"shopify.com/thing_500.px\"] // [1280, \"shopify.com/thing_1280.px\"] */}\n          {pathSrcSet &&\n            Object.entries(pathSrcSet).map(([size, url]) => (\n              <source key={url} media={`(max-width: ${size}px)`} srcSet={url} />\n            ))}\n          <img src={!isInView ? undefined : defaultPath} loading=\"lazy\" ref={forwardedRef} {...rest} />\n        </StyledPicture>\n      }\n    </>\n  ) : null\n}\n\nconst SmartImg = forwardRef((props: SmartImageProps, ref) => <ApiImage {...(props as any)} forwardedRef={ref} />)\nSmartImg.displayName = 'SmartImg'\n\nexport default SmartImg\n","import { useState, useRef, useEffect, MutableRefObject } from 'react'\n\nexport default function useEffectRef<T>(defaultRefValue: any) {\n  const [refToObserve, setRefToObserve] = useState<MutableRefObject<T>>()\n  const refToSet = useRef<T>(defaultRefValue)\n  useEffect(() => {\n    setRefToObserve(refToSet)\n  }, [])\n\n  return [refToSet, refToObserve ?? null]\n}\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport ButtonPrimary from 'components/Button'\nimport { ItemHeader } from 'pages/SingleItem/styleds'\nimport SmartImg from 'components/SmartImg'\n\nconst pastelle404IMG = '/APPAREL/2022/FALL/REBIRTH/IMAGES/front-large_Xp_n4aZ6fdS.png'\n\nconst Container = styled.div`\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  ${ButtonPrimary} {\n    width: 196px;\n    padding: 9px;\n    color: ${({ theme }) => theme.primaryText1};\n    &:hover {\n      ${({ theme }) => theme.bg5}\n    }\n  }\n  h2 {\n    margin: 36px 0 32px;\n  }\n  img {\n    margin-top: 20px;\n    max-width: 506px;\n  }\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    img {\n      max-width: 287px;\n    }\n    h2 {\n      font-size: 1.6rem;\n      text-align: center;\n    }\n  `}\n`\n\nexport default function NotFound() {\n  return (\n    <article>\n      <Container>\n        <ItemHeader itemColor=\"#000\">PAGE NOT FOUND!</ItemHeader>\n        <SmartImg ikPath={pastelle404IMG} transformation={[{ pr: true, q: 80 }]} />\n        <h2>The page you are looking for does not exist. </h2>\n        <ButtonPrimary as={Link} to={'/'}>\n          Back home\n        </ButtonPrimary>\n      </Container>\n    </article>\n  )\n}\n"],"sourceRoot":""}